{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth/auth.service\";\nexport class TokenInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    // Obtiene el token de autenticación\n    const token = this.authService.getToken();\n    // Clona la solicitud y agrega el encabezado de autorización si hay un token\n    if (token) {\n      const tokenizeReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(tokenizeReq);\n    }\n    // Si no hay token, solo continua con la solicitud original\n    return next.handle(req);\n  }\n  static #_ = this.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac\n  });\n}","map":{"version":3,"names":["TokenInterceptorService","constructor","authService","intercept","req","next","token","getToken","tokenizeReq","clone","setHeaders","Authorization","handle","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac"],"sources":["C:\\Users\\DELL\\Documents\\GitHub\\TaskTraker\\src\\app\\services\\token-interceptor\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { AuthService } from '../auth/auth.service';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Obtiene el token de autenticación\n    const token = this.authService.getToken();\n\n    // Clona la solicitud y agrega el encabezado de autorización si hay un token\n    if (token) {\n      const tokenizeReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(tokenizeReq);\n    }\n\n    // Si no hay token, solo continua con la solicitud original\n    return next.handle(req);\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,uBAAuB;EAElCC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD;IACA,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,EAAE;MACT,MAAME,WAAW,GAAGJ,GAAG,CAACK,KAAK,CAAC;QAC5BC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;MACF,OAAOD,IAAI,CAACO,MAAM,CAACJ,WAAW,CAAC;;IAGjC;IACA,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;EACzB;EAAC,QAAAS,CAAA,G;qBApBUb,uBAAuB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAvBlB,uBAAuB;IAAAmB,OAAA,EAAvBnB,uBAAuB,CAAAoB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}